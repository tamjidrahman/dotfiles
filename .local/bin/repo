#!/bin/bash

get_repo_list() {
  find ~/src -maxdepth 1 -type d -exec basename {} \; | sed '1d'
}

get_nvim_startup_prefix() {
  if [[ -f "$1/poetry.lock" ]]; then
    # If the selected directory contains a poetry.lock file, activate the poetry environment
    echo 'source "$(poetry env list --full-path | grep Activated | cut -d" " -f1)/bin/activate"'
  elif [[ -d "$1/.venv" ]]; then
    # If the selected directory contains a .venv directory, activate the virtual environment
    echo "source $1/.venv/bin/activate"
  else
    # Fallback to empty prefix
    echo ""
  fi
}

repo() {
  if [ $# -eq 0 ]; then
    local selected_repo
    selected_repo=$(get_repo_list | fzf --height 40% --reverse)
    if [ -z "$selected_repo" ]; then
      echo "No repository selected."
      return 1
    fi
    set -- "$selected_repo"
  fi

  local restart_flag=""
  if [[ "$1" == "--restart" || "$1" == "-r" ]]; then
    restart_flag="$1"
    shift
  elif [[ "$2" == "--restart" || "$2" == "-r" ]]; then
    restart_flag="$2"
  fi

  local nvim_prefix
  nvim_prefix=$(get_nvim_startup_prefix ~/src/"$1")
  local nvim_command="${nvim_prefix:+$nvim_prefix && }nvim"

  if [[ "$1" == "dotfiles" ]]; then
    # Define an array of session windows for better readability
    local session_windows=(
      "config::cd .config && $nvim_command ."
      "local::cd .local && $nvim_command ."
      "scratch::c"
    )

    # Join the array elements with spaces for the echo command
    echo session "$restart_flag" "$1" "$HOME/src/$1/" "${session_windows[@]}"

    # Execute the session command with the same windows
    session "$restart_flag" "$1" "$HOME/src/$1/" "${session_windows[@]}"
  elif [[ "$1" == "valon" ]]; then
    local fp_prefix
    fp_prefix=$(get_nvim_startup_prefix ~/src/"$1"/front-porch)

    local web_prefix
    web_prefix=$(get_nvim_startup_prefix ~/src/"$1"/web)

    # Create separate nvim commands for each directory
    local fp_nvim_command="${fp_prefix:+$fp_prefix && }nvim"
    local web_nvim_command="${web_prefix:+$web_prefix && }nvim"

    # Define an array of session windows for better readability
    local session_windows=(
      "front-porch::cd front-porch && $fp_nvim_command"
      "web::cd web && $web_nvim_command"
      "scratch::cd front-porch"
      "npm::cd web && make env-local && npm run dev"
      "peach_dev::kill -9 $(lsof -ti :8080) && cd front-porch && peach dev"
      "dev_db_proxy::cd front-porch && peach db proxy dev"
      "stage_db_proxy::cd front-porch && peach db proxy stage"
      "prod_db_proxy::cd front-porch && peach db proxy prod"
    )

    # Join the array elements with spaces for the echo command
    echo session "$restart_flag" "$1" "$HOME/src/$1/" "${session_windows[@]}"

    # Execute the session command with the same windows
    session "$restart_flag" "$1" "$HOME/src/$1/" "${session_windows[@]}"
  else
    echo session "$restart_flag" "$1" "$HOME/src/$1/" "$nvim_command" "ls"
    session "$restart_flag" "$1" "$HOME/src/$1/" "$nvim_command" "ls"
  fi
}

_repo_autocomplete() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($(compgen -W "$(get_repo_list)" -- "$cur"))
}

# Check if the script is being sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  # If the script is executed directly, run the repo function
  repo "$@"
else
  # If the script is sourced, set up the completion
  complete -F _repo_autocomplete repo
fi
