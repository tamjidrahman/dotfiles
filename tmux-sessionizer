#!/usr/bin/env bash

# Function to get GitHub repositories
get_github_repos() {
    user=$(gh api user -q .login)
    QUERY='
      query($owner: String!, $endCursor: String) {
        repositoryOwner(login: $owner) {
          repositories(first: 100, after: $endCursor) {
            nodes { nameWithOwner }
            pageInfo {
              hasNextPage
              endCursor
            }
          }
        }
      }
    '
    gh api graphql --paginate -F owner="${1:-$user}" -f query="${QUERY}" --jq '.data.repositoryOwner.repositories.nodes.[].nameWithOwner'
}

# Check if a command-line argument is provided
if [[ $# -eq 1 ]]; then
    selected=$1  # Use the provided argument as the selected directory
else
    # Define an array with directories
    directories=(
        ~/src
        ~/Library/Mobile\ Documents/iCloud~md~obsidian/Documents
    )

    # Get local directories
    local_dirs=$(find "${directories[@]}" -mindepth 1 -maxdepth 1 -type d)

    # Get GitHub repositories
    github_repos=$(get_github_repos)

    # Function to extract repository name from GitHub path
    extract_repo_name() {
        echo "$1" | sed 's|.*/||'
    }

    # Combine local directories and GitHub repositories
    all_options=$(
        (echo "$local_dirs" | sed 's|^.*/||; s/$/ (local)/';
         echo "$github_repos" | sed 's/$/ (GH)/' ) |
        sort | uniq |
        awk '
        {
            if ($NF == "(local)") {
                local_name = $0
                gsub(/ \(local\)$/, "", local_name)
                if (!(local_name in seen)) {
                    print
                    seen[local_name] = 1
                }
            } else if ($NF == "(GH)") {
                gh_name = $0
                gsub(/ \(GH\)$/, "", gh_name)
                repo_name = gh_name
                gsub(".*/", "", repo_name)
                if (!(repo_name in seen)) {
                    print
                    seen[repo_name] = 1
                }
            }
        }' |
        sed 's/ (local)$//' |
        sed 's/ (GH)$/ (GH)/'
    )

    # Use fzf to select from all options
    selected=$(echo "$all_options" | fzf)
fi
# If no directory is selected, exit the script
if [[ -z $selected ]]; then
    exit 0
fi

# Handle GitHub repository selection
if [[ $selected == *"(GH)"* ]]; then
    repo_name=${selected% (GH)}
    local_path=~/src/${repo_name#*/}
    if [ ! -d "$local_path" ]; then
        echo "Cloning $repo_name to $local_path"
        mkdir -p "$local_path"
        gh repo clone "$repo_name" "$local_path"
    fi
    selected=$local_path
fi

# Get the base name of the selected directory and replace dots with underscores
selected_name=$(basename "$selected" | tr . _)

# Check if tmux is running by looking for the tmux process
tmux_running=$(pgrep tmux)

# Function to determine the startup command
get_startup_command() {
    if [[ -f "$selected/poetry.lock" ]]; then
      # If the selected directory contains a poetry.lock file, activate the poetry environment
      echo 'source "$(poetry env list --full-path | grep Activated | cut -d" " -f1)/bin/activate" && vim'
    else
      # Fallback to just opening vim
      echo "vim"
    fi
}
# If a tmux session with the selected name does not already exist, create a detached session
if ! tmux has-session -t=$selected_name 2> /dev/null; then
    tmux new-session -ds "$selected_name" -c "$selected" # escape spaces
    startup_command=$(get_startup_command)
    tmux send-keys -t $selected_name "$startup_command" C-m
    # Open a new window (tab) in the same session with no commands run
    tmux new-window -t "$selected_name" -c "$selected"
    # Select the first window (window 0) in the session
    tmux select-window -t "$selected_name:0"
fi
# Function to prompt the user
prompt_detach() {
    while true; do
        read -p "Do you want to detach others from the tmux session? (y/n): " yn
        case $yn in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

# Check if others are attached to the tmux session
others_attached() {
    attached_count=$(tmux list-clients -t $selected_name | wc -l)
    echo "There are $attached_count other client(s) connected to the tmux session."
    (( $attached_count > 0 ))
}

# Main logic to attach or switch to the tmux session
if others_attached && ! prompt_detach; then
    exit 0
else
    if [[ -z $TMUX ]]; then
        # Not inside a tmux session
        tmux attach-session -d -t $selected_name 
    else
        # Inside a tmux session
        tmux switch-client -t $selected_name 
    fi
fi
